Script started on Mon, Jul 10, 2017  6:34:59 PM
]0;/cygdrive/c/Users/Beesham/Documents/UnversityOfWindsor/Courses/60-141 (Intro to Algo and Programming 2)/Labs/Recursion, Searching, Sorting, and Pointers
[32mBeesham@Beesham-Desktop [33m/cygdrive/c/Users/Beesham/Documents/UnversityOfWindsor/Courses/60-141 (Intro to Algo and Programming 2)/Labs/Recursion, Searching, Sorting, and Pointers[0m
$ cat assign_1.c
/*
    Author: Beesham Sarendranauth, 104854956
    Date: July 12, 2017
    Description: This program demonstrated the sorting and searching of a matrix of integers
                through sinking sort and recursive binary search using pointer + offset notation
    *Note:  if a searched number is found, the position will be, if more than one of the value exists,
            the middle value of the range of same values +/- a position.
*/
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define COL 20
#define ROW 20
#define SIZE COL * ROW
#define DONE 1
#define FOUND 1
#define NOTFOUND -1

//function prototypes
int sortMatrix (unsigned int rowsize, unsigned int colsize, int A[rowsize][colsize]);
int searchMatrix (int V, int *P, unsigned int rowsize, unsigned int colsize, int A[rowsize][colsize]);
void displayMatrix(int const A[][COL]);
void genMatrix(int A[][COL]);
int getInput();

int main(void){
    
    srand(time(NULL));  //seeds the rand() function
    
    int array[ROW][COL] = {0};    //init array to 0
    int searchedNumPosition[2] = {SIZE - 1, 0}; //the position of the number searched will be stored here
    int input;
        
    genMatrix(array);
    
    puts("\nUn-sorted randomly generated matrix of values:");
    displayMatrix(array);   //displays un-sorted matrix
    
    sortMatrix(ROW, COL, array);  
   
    puts("\nSorted previously generated matrix of values:");
    displayMatrix(array);   //displays sorted matrix
    
    puts("");
    
    input = getInput();
    
    if(searchMatrix(input, searchedNumPosition, ROW, COL, array) == FOUND){
        printf("\n%s %d %s [%d][%d]\n", "The number", input,
                                      "is found at position", searchedNumPosition[0], searchedNumPosition[1]);
    }
    else{
        printf("\n%s %d %s [%d][%d]\n", "The number", input,
                                      "is not found. Default position", searchedNumPosition[0], searchedNumPosition[1]);
    }
}

/*
    genMatrix: generates a random num from 0 - 100 and stores it in a NxM matrix
    input: the array to be used to store the numbers
*/
void genMatrix(int A[][COL]){
    //gens a random num for each element in the array
    for (int i = 0; i < ROW; i++){
        for (int j = 0; j < COL; j++){
            A[i][j] = rand() % 101; //assigns a random positive int from 0 - 100 to a position in the array 
                                    //(0 + (rand() % (100 + 1 - 0)) is the formula used to get 101
        }
    }
}

/*
    getInput: prompts the user for input of type integer
    output: the value the user input 
*/
int getInput(){
    //asks for number to search for in matrix
    int input;
    printf("%s","Please enter a positive number to search (0 - 100): ");
    scanf("%d", &input);
    
    return input;
}

/*
    displayMatrix: displays the values of matrix
    input: the array to be displayed (A)
*/
void displayMatrix(const int A[][COL]){
    puts("");

    //traverses and displays matrix
    for (int i = 0; i < ROW; i++){
        
        //prints column header
        if (i == 0){
            printf(" %3s  ", " ");
            for (int j = 0; j < COL; j++){
                printf(" %3d ", j);
            }
            
            puts("");
            
            printf(" %3s  ", " ");
            for (int j = 0; j < COL; j++){
                printf(" %3s ", "V");
            } 
        }
        
        //prints the value of the matrix at the index
        for (int j = 0; j < COL; j++){
            if (j % COL == 0){
                puts("");
                printf(" %3d %s", i, ">");  //prints row header
            }
            printf(" %3d ", A[i][j]);
        } 
    }
    
    puts("");
}

/*
    sortMatrix: sorts a matrix of size NxM in descending order i.e. A[0][0] would have the largest value
    and A[N][M] would have the smallest value
    input: 2 dimensional array A[][], the row (rowsize) and column (colsize) size
    output: returns 1 (DONE) when sort finishes
*/
int sortMatrix (unsigned int rowsize, unsigned int colsize, int A[][colsize]){
    int swap = 0;
    int sizeOfArray = rowsize * colsize;
        
    //control loop for passes
    for(unsigned int pass = 0; pass < sizeOfArray - 1 && !swap; ++pass){
        //control loop for amount of comparisons per pass
        //traverses the matrix of integers
        for(unsigned int i = 0; i < rowsize; i++){
            for(unsigned int j = 0; j < colsize; j++){
                int hold = A[i][j];

                //checks if current num is less than next, if so then swap
                if(A[i][j] < A[i][j+1]){
                    hold = A[i][j];
                    A[i][j] = A[i][j+1];
                    A[i][j+1] = hold;
                    swap = 0;
                }
            }
        }            
    }    
    
    return DONE;
}

/*
    searchMatrix: searches a sorted matrix for a given value using recursive binary search
                  it also computes the position of the value in the matrix
    input: the value to be searched (V)
           the size of the matrix (rowsize, colsize)
           the array (A[][])
           a pointer to the potential position of the value
    output: 1 if the value is found, otherwise -1
*/
int searchMatrix (int V, int *P, unsigned int rowsize, unsigned int colsize, int A[][colsize]){
    
    int isFound = NOTFOUND;
    int minOffset = *P; //offset for the location of min num in A, the 0th element of array P
    int maxOffset = *(P + 1);   //offset for the location of max num in A, the 1st element of array P
    int middleOffset = (maxOffset + minOffset) / 2; //offset for the location of middle num in A
    
    int *ptr = &A[0][0];    //points to the beginning of the matrix (A)
            
    //computes the actual value for the min, max, and middle
    int minValue = *(ptr + minOffset);
    int maxValue = *(ptr + maxOffset);
    int middleValue = *(ptr + middleOffset);
    
    //base case, set the position of the num in the array P
    if (V == middleValue){
        P[0] = middleOffset / colsize;    //row of searched num
        P[1] = middleOffset % colsize;    //col of searched num
        return FOUND;
    }
        
    //if num is not found, set the default location in the array P
    if (((middleValue == minValue) && (middleValue == maxValue) && V != middleValue)){
        P[0] = NOTFOUND;
        P[1] = NOTFOUND;
        return NOTFOUND;
    }
        
    if (V > middleValue){   //if num is greater than the middle val of the array, search the upper half
        *P = middleOffset - 1;
        //no need to re-assign the 1st element of arr P as it still is the max
        isFound = searchMatrix(V, P, rowsize, colsize, A);
    }
    else if (V < middleValue){      //if num is lesser than the middle val of the array, search the lower half
        *P = minOffset;
        *(P + 1) = middleOffset + 1;
        isFound = searchMatrix(V, P, rowsize, colsize, A);
    }     
    
    return isFound;
}































]0;/cygdrive/c/Users/Beesham/Documents/UnversityOfWindsor/Courses/60-141 (Intro to Algo and Programming 2)/Labs/Recursion, Searching, Sorting, and Pointers
[32mBeesham@Beesham-Desktop [33m/cygdrive/c/Users/Beesham/Documents/UnversityOfWindsor/Courses/60-141 (Intro to Algo and Programming 2)/Labs/Recursion, Searching, Sorting, and Pointers[0m
$ cc assign_1.c
]0;/cygdrive/c/Users/Beesham/Documents/UnversityOfWindsor/Courses/60-141 (Intro to Algo and Programming 2)/Labs/Recursion, Searching, Sorting, and Pointers
[32mBeesham@Beesham-Desktop [33m/cygdrive/c/Users/Beesham/Documents/UnversityOfWindsor/Courses/60-141 (Intro to Algo and Programming 2)/Labs/Recursion, Searching, Sorting, and Pointers[0m
$ ls -a
.  ..  .gitignore  a.exe  a.exe.stackdump  assign_1.bak  assign_1.c  assign_1.txt
]0;/cygdrive/c/Users/Beesham/Documents/UnversityOfWindsor/Courses/60-141 (Intro to Algo and Programming 2)/Labs/Recursion, Searching, Sorting, and Pointers
[32mBeesham@Beesham-Desktop [33m/cygdrive/c/Users/Beesham/Documents/UnversityOfWindsor/Courses/60-141 (Intro to Algo and Programming 2)/Labs/Recursion, Searching, Sorting, and Pointers[0m
$ ./a.exe

Un-sorted randomly generated matrix of values:

         0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19 
         V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V 
   0 >  83   36    0   53   79    4   24   49   58   42   12   97   65   27   25   22   92   16   14   30 
   1 >  49    8   27   29   16   92   38   77   46    4   30   61   88   86  100   33   57    8   70   12 
   2 >  30   99   67   93    0   63   10   98   15   39   52   88   96   94   87   76    2   73   42    7 
   3 >  12   30   43   87   31   44    7   47   24   75    7   51   89   58   97   39   75   16   95   43 
   4 >  15   27   17   26   81   11   17   97   60   10   26   58   67   15   22   46   36   98   66   96 
   5 >  97   61   85   34   71   42   49   72   30   87   81   26   45   28   92   10   35   76   34   67 
   6 >  50    3   34   44   13   68   79    2   27   11   22   23   17   28   46   22   82   63   25   42 
   7 >  98   25   39   93   71   92   57   92    2   30   28   37   18   80   53   46   82   93   58   27 
   8 >  34    6   61   12   86   37   98   43   22    5   22   40   95   91   86   22   43   10   24   86 
   9 >  88   83   63   44   56   60   16   85   11    7   20   54   14   98   57   14    5   88   80  100 
  10 >  94   74   73   25   69   23    8   24   54   90   63   94   78   68   32   69   65   20   54   42 
  11 >  27   92   10   35   80   62    8   30   50   20    5   90   31  100   37   20   58   56   53   50 
  12 >  22   64   48   97   84   23   37   62   59   64   11   53   49   95   77    0   51   52   91   62 
  13 >  11   37   80   55   76   62   29   12   26   62   64    4   54   86    7   68   37   72   96   63 
  14 > 100    1   83   62   61   31   88   68   36   56   10   23   36   82   39  100   66    8    8   10 
  15 >  73   70    8   56   68   53   90   52   71   63   94   85    9   21   53   85   10   74    3   39 
  16 >  53   44    0   57   92   59   17    3   34   63   91   52   28   96   12   54   13   41   45   68 
  17 >  42    5   12    9   11   58   25   49   70   19   11   40   95   55   68    1   30   85    1   49 
  18 >  31   62    0   95   96   92    2   70   36   28   77   92   69   26   35   16   16   45   57   96 
  19 >   0   85    7    5    4   42   73   35   83   90   57   23    7   30   64   97   61   65   11   88 

Sorted previously generated matrix of values:

         0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19 
         V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V 
   0 > 100  100  100  100  100   99   98   98   98   98   98   97   97   97   97   97   97   96   96   96 
   1 >  96   96   96   95   95   95   95   95   94   94   94   94   93   93   93   92   92   92   92   92 
   2 >  92   92   92   92   91   91   91   90   90   90   90   89   88   88   88   88   88   88   87   87 
   3 >  87   86   86   86   86   86   85   85   85   85   85   85   84   83   83   83   83   82   82   82 
   4 >  81   81   80   80   80   80   79   79   78   77   77   77   76   76   76   75   75   74   74   73 
   5 >  73   73   73   72   72   71   71   71   70   70   70   70   69   69   69   68   68   68   68   68 
   6 >  68   68   67   67   67   66   66   65   65   65   64   64   64   64   63   63   63   63   63   63 
   7 >  63   62   62   62   62   62   62   62   61   61   61   61   61   60   60   59   59   58   58   58 
   8 >  58   58   58   57   57   57   57   57   57   56   56   56   56   55   55   54   54   54   54   54 
   9 >  53   53   53   53   53   53   53   52   52   52   52   51   51   50   50   50   49   49   49   49 
  10 >  49   49   48   47   46   46   46   46   45   45   45   44   44   44   44   43   43   43   43   42 
  11 >  42   42   42   42   42   42   41   40   40   39   39   39   39   39   38   37   37   37   37   37 
  12 >  37   36   36   36   36   36   35   35   35   35   34   34   34   34   34   33   32   31   31   31 
  13 >  31   30   30   30   30   30   30   30   30   30   29   29   28   28   28   28   28   27   27   27 
  14 >  27   27   27   26   26   26   26   26   25   25   25   25   25   24   24   24   24   23   23   23 
  15 >  23   23   22   22   22   22   22   22   22   22   21   20   20   20   20   19   18   17   17   17 
  16 >  17   16   16   16   16   16   16   15   15   15   14   14   14   13   13   12   12   12   12   12 
  17 >  12   12   11   11   11   11   11   11   11   11   10   10   10   10   10   10   10   10    9    9 
  18 >   8    8    8    8    8    8    8    7    7    7    7    7    7    7    6    5    5    5    5    5 
  19 >   4    4    4    4    3    3    3    2    2    2    2    1    1    1    0    0    0    0    0    0 

Please enter a positive number to search (0 - 100): 30

The number 30 is found at position [13][1]
]0;/cygdrive/c/Users/Beesham/Documents/UnversityOfWindsor/Courses/60-141 (Intro to Algo and Programming 2)/Labs/Recursion, Searching, Sorting, and Pointers
[32mBeesham@Beesham-Desktop [33m/cygdrive/c/Users/Beesham/Documents/UnversityOfWindsor/Courses/60-141 (Intro to Algo and Programming 2)/Labs/Recursion, Searching, Sorting, and Pointers[0m
$ ./a.exe

Un-sorted randomly generated matrix of values:

         0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19 
         V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V 
   0 >  82   50   83   79   43   85   84   77    3   24   55   86   38   67   97   33   66   65   78   71 
   1 >  47   26   46   96   55   48   74    5   55   36   17   87   98   80   22   23   14   20   72   65 
   2 >  31   50  100   35   94   92   61  100   16   39   28   26   91   16   99    3   79   21   75   42 
   3 >  22   60   13   22  100   85   79   72   53   47   45   41    1    0   13   10   62   75   24   81 
   4 >  23    0  100   69   51   39   10   53    9    4    0   71   92    9   43   31   26   91    4   81 
   5 >  55   21   39   92   58   12   15   23    6   91   54   25   28   44   12   50   25   24    3    0 
   6 >  29   46   49   62   23   53   20   19   24   41   47    6   85   99   85   39   18   47   30   15 
   7 >  35   58   30   44   91    5   64   40   91   90   48   34   73   31    8   56   37   39   76   34 
   8 >  14   22   85    2    6   27   90   85   61   69   11   98   40   28   38   79   97    8   32   50 
   9 >  27   44   87   34   92   94   44   23   13   13    9   98   84   38    3   68   49    0   81   86 
  10 >  93   18   54   84   94   35   41   22   18   22   52   43   43   90   73   98   83    3   53    9 
  11 >  71   20   63    2   84   61   73   58   17   57   71   34   91    6    3   17   84   27   83    7 
  12 >  73   93   80   59   92   95   81   61   68    0   58   97   70   30   14    7   21   83   63   51 
  13 >  55   24   88   99   84   10   61   37   65   63   29   47   90   96   99   47   68   85   52    9 
  14 >  10   67   65   84   97   35   66    7   86   64   35   38   25   97   65   64   29   22   83  100 
  15 >  80   93   83   15   36   63   77   19   73    3   50   43   93   75   53   93   48   69   60   37 
  16 >  84   37    2   89    0   84   87   83   69   79   84   83   28   22   79   20   96   74   95   91 
  17 >  44    6   19   74   25   51    9   18   51   43   19   29   64   95   68   32   75   88   82   35 
  18 >  45   43   35   49   81   43   60   85   90   10   16   63   69   87    6   19   26   64   34   50 
  19 >  89    8   12   15   68   59    2   97   79   26   70   27   92   72   13   74   23   30   33   70 

Sorted previously generated matrix of values:

         0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19 
         V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V 
   0 > 100  100  100  100  100   99   99   99   99   98   98   98   98   97   97   97   97   97   97   96 
   1 >  96   96   95   95   95   94   94   94   93   93   93   93   93   92   92   92   92   92   92   91 
   2 >  91   91   91   91   91   91   90   90   90   90   90   89   89   88   88   87   87   87   87   86 
   3 >  86   86   85   85   85   85   85   85   85   85   84   84   84   84   84   84   84   84   84   84 
   4 >  83   83   83   83   83   83   83   83   82   82   81   81   81   81   81   80   80   80   79   79 
   5 >  79   79   79   79   79   78   77   77   76   75   75   75   75   74   74   74   74   73   73   73 
   6 >  73   73   72   72   72   71   71   71   71   70   70   70   69   69   69   69   69   68   68   68 
   7 >  68   68   67   67   66   66   65   65   65   65   65   64   64   64   64   64   63   63   63   63 
   8 >  63   62   62   61   61   61   61   61   60   60   60   59   59   58   58   58   58   57   56   55 
   9 >  55   55   55   55   54   54   53   53   53   53   53   52   52   51   51   51   51   50   50   50 
  10 >  50   50   50   49   49   49   48   48   48   47   47   47   47   47   47   46   46   45   45   44 
  11 >  44   44   44   44   43   43   43   43   43   43   43   43   42   41   41   41   40   40   39   39 
  12 >  39   39   39   38   38   38   38   37   37   37   37   36   36   35   35   35   35   35   35   35 
  13 >  34   34   34   34   34   33   33   32   32   31   31   31   30   30   30   30   29   29   29   29 
  14 >  28   28   28   28   27   27   27   27   26   26   26   26   26   25   25   25   25   24   24   24 
  15 >  24   24   23   23   23   23   23   23   22   22   22   22   22   22   22   22   21   21   21   20 
  16 >  20   20   20   19   19   19   19   19   18   18   18   18   17   17   17   16   16   16   15   15 
  17 >  15   15   14   14   14   13   13   13   13   13   12   12   12   11   10   10   10   10   10    9 
  18 >   9    9    9    9    9    8    8    8    7    7    7    6    6    6    6    6    6    5    5    4 
  19 >   4    3    3    3    3    3    3    3    2    2    2    2    1    0    0    0    0    0    0    0 

Please enter a positive number to search (0 - 100): 100

The number 100 is found at position [0][2]
]0;/cygdrive/c/Users/Beesham/Documents/UnversityOfWindsor/Courses/60-141 (Intro to Algo and Programming 2)/Labs/Recursion, Searching, Sorting, and Pointers
[32mBeesham@Beesham-Desktop [33m/cygdrive/c/Users/Beesham/Documents/UnversityOfWindsor/Courses/60-141 (Intro to Algo and Programming 2)/Labs/Recursion, Searching, Sorting, and Pointers[0m
$ ./a.exe

Un-sorted randomly generated matrix of values:

         0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19 
         V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V 
   0 >  14   73   95   17   24   91   84   55   24   26    7    4   84   88   79   87   56   26   24  100 
   1 >  18   97   17    7   53  100   98   79   57    7    6   13   84    8   42   65   62   47   57    2 
   2 >  27   99   26   93   32   10   35   23   73   10   19   99   25   46   97    3   31   11   29    3 
   3 >  41   45   71   97    5   69    4    3   32   81   54   94   45   59   38   88    6   74   43   79 
   4 >  19   85   34   71   44   73   59   84   50   49   63   25   52   32   88   13    6   90   70   52 
   5 >   4   16   17   12   48   77   76   78   99   67   21   58   36   75   29   84   89    3   21   45 
   6 >  79   19   28   11   43   85   32   11   21   83   52   65   97   41   17   48   66   33   28   93 
   7 >  22   86   45   15   40   28   42   76   87   16   47   54   23   69   54   81   88   62   12   61 
   8 >  31   69   61   32   11   81    5    8   82   33   97   69  100    2   32    3   29   40   89    3 
   9 >  26   73   22    9   72   26  100   33   20   12   57   78   19   72   81   96   86   72   60   58 
  10 >  42   16   55   20   76   90   56   31   95    0   71   95   43   98   90    9   43   61   18   43 
  11 >  22   17    5   86   88   54   60   36   29   38   42   88   68   68   75   65   84   59    1   40 
  12 >  59   90   67   22   25   54  100   14   48    8   68   49  100   71   80   63   29   57   74   65 
  13 >  41   25   12   18    6    0   81   13   37   81   62   55   69   99   40   69   66   67    4   42 
  14 >  14   44   38   58   60   94   13   85   53   88   34   78   21   10    8   67   38   73   78   35 
  15 >  53   67   50   77   71   66   44   86   41   66   14   52   80   64   70   38    7   25   69   48 
  16 >  99   37   20   42   47   76   39   78   75   37   22   31   90   56   91   81   65   45    2   54 
  17 >  69    7   24   66   64   89   74   31   42   91   65   36    5   22   63   58   28   97   98   57 
  18 >  68   38    2   89   97    8   90   25   56   17   32   56   25   49   33   99   62   70    8   46 
  19 >  46   61   83   63   60   89   33    8   42   29   92   82   22   96   15    3   86   52   24   94 

Sorted previously generated matrix of values:

         0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19 
         V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V    V 
   0 > 100  100  100  100  100  100   99   99   99   99   99   99   98   98   98   97   97   97   97   97 
   1 >  97   97   96   96   95   95   95   94   94   94   93   93   92   91   91   91   90   90   90   90 
   2 >  90   90   89   89   89   89   89   88   88   88   88   88   88   88   87   87   86   86   86   86 
   3 >  86   85   85   85   84   84   84   84   84   84   83   83   82   82   81   81   81   81   81   81 
   4 >  81   80   80   79   79   79   79   78   78   78   78   78   77   77   76   76   76   76   75   75 
   5 >  75   74   74   74   73   73   73   73   73   72   72   72   71   71   71   71   71   70   70   70 
   6 >  69   69   69   69   69   69   69   69   68   68   68   68   67   67   67   67   67   66   66   66 
   7 >  66   66   65   65   65   65   65   65   64   64   63   63   63   63   62   62   62   62   61   61 
   8 >  61   61   60   60   60   60   59   59   59   59   58   58   58   58   57   57   57   57   57   56 
   9 >  56   56   56   56   55   55   55   54   54   54   54   54   54   53   53   53   52   52   52   52 
  10 >  52   50   50   49   49   49   48   48   48   48   47   47   47   46   46   46   45   45   45   45 
  11 >  45   44   44   44   43   43   43   43   43   42   42   42   42   42   42   42   42   41   41   41 
  12 >  41   40   40   40   40   39   38   38   38   38   38   38   37   37   37   36   36   36   35   35 
  13 >  34   34   33   33   33   33   33   32   32   32   32   32   32   32   31   31   31   31   31   29 
  14 >  29   29   29   29   29   28   28   28   28   27   26   26   26   26   26   25   25   25   25   25 
  15 >  25   25   24   24   24   24   24   23   23   22   22   22   22   22   22   22   21   21   21   21 
  16 >  20   20   20   19   19   19   19   18   18   18   17   17   17   17   17   17   16   16   16   15 
  17 >  15   14   14   14   14   13   13   13   13   12   12   12   12   11   11   11   11   10   10   10 
  18 >   9    9    8    8    8    8    8    8    8    7    7    7    7    7    6    6    6    6    5    5 
  19 >   5    5    4    4    4    4    3    3    3    3    3    3    3    2    2    2    2    1    0    0 

Please enter a positive number to search (0 - 100): 30

The number 30 is not found. Default position [-1][-1]
]0;/cygdrive/c/Users/Beesham/Documents/UnversityOfWindsor/Courses/60-141 (Intro to Algo and Programming 2)/Labs/Recursion, Searching, Sorting, and Pointers
[32mBeesham@Beesham-Desktop [33m/cygdrive/c/Users/Beesham/Documents/UnversityOfWindsor/Courses/60-141 (Intro to Algo and Programming 2)/Labs/Recursion, Searching, Sorting, and Pointers[0m
$ exit
exit

Script done on Mon, Jul 10, 2017  6:36:22 PM
